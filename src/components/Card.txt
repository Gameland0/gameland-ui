import React, { useEffect, useMemo, useState } from 'react'
import styled from 'styled-components'
import { Button } from 'antd'
import { NFTData, useActiveWeb3React, useGameLandContract } from '../hooks'
import { formatEther } from '@ethersproject/units'
import { isEqual } from 'lodash'
import { ZeroNftInfo } from '../utils'
import { Img } from './Img'
import { Default, Imgs } from './Nft'
import { Icon } from '../components/Icon'

export interface CardProps extends NFTData {
  cost?: number
  owner?: string
  type?: 'rent' | 'lend'
  onClick?: () => void
  showInfo?: boolean
}
const CardBox = styled.div`
  width: 100%;
  background: #505050;
  border: 1px solid #707070;
  border-right: none;
  padding: 1rem;

  &:last-child {
    border-right: 1px solid #707070;
  }
  img {
    width: 100%;
    height: auto;
    border-radius: 2rem;
  }
`
const Details = styled.div`
  margin-top: 1rem;
  padding: 0.5rem;
  p {
    margin-bottom: 0.3rem;
  }
`
const Days = styled.span`
  color: #aaa;
  font-size: 0.875rem;
  margin-left: 0.5rem;
`
export const Card: React.FC<CardProps> = ({ showInfo, name, price, days, onClick, type, nftId }) => {
  const { account } = useActiveWeb3React()
  const gamelandContract = useGameLandContract()
  const [borrowed, setBorrowed] = useState(false)
  const [lending, setLending] = useState(['0.0', '0.0', '0.0', '0.0'])
  useEffect(() => {
    if (type === 'rent' || !type) {
      return
    }
    const syncFn = async () => {
      // setLending(!isEmpty(null))
      // setBorrowed([])

      try {
        // const _lending = await gamelandContract?.get_all_nftinfo(nftId)
        // setLending(_lending ? _lending.map((item: any) => formatEther(item).toString()) : [])

        const _borrowed = await gamelandContract?.borrow_or_not(nftId)
        setBorrowed(_borrowed)
        console.log(_borrowed)
      } catch (err) {
        throw err
      }
    }
    syncFn()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [nftId, type, account])
  return (
    <CardBox onClick={onClick}>
      {/* <Img src={img || url} alt="" /> */}
      <Img src={Imgs[name] ? Imgs[name] : Default} alt="" />

      <Details className="flex flex-h-between">
        <div>
          <p>{name}</p>
          <>
            <span>
            {price} <Icon /> / day
            </span>
            <Days>{days} days</Days>
          </>
        </div>
        {showInfo ? <LendInfo onClick={() => onClick} lending={lending} borrowed={borrowed} /> : null}
      </Details>
    </CardBox>
  )
}
interface LendInfoProps {
  onClick: () => void
  lending?: any[]
  borrowed?: boolean
}
const LendInfo: React.FC<LendInfoProps> = ({ onClick, lending, borrowed }) => {
  const isLending = useMemo(() => {
    return !isEqual(lending, ZeroNftInfo)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [lending])
  return (
    <div>
      {isLending ? (
        !borrowed ? (
          <Button onClick={onClick} ghost>
            Withdraw
          </Button>
        ) : (
          'borrowed info'
        )
      ) : (
        <Button onClick={onClick} ghost>
          Lend
        </Button>
      )}
    </div>
  )
}
